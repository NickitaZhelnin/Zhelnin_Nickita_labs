//очередь
#include <iostream>
using namespace std;

struct Node {
    char val;
    Node* next;
    Node(char _val) : val(_val), next(nullptr) {}
};

struct list {
    Node* first;
    Node* last;

    list() : first(nullptr), last(nullptr) {}

    bool is_empty() {
        return first == nullptr;
    }
    void add_first(char _val){
        Node* p = new Node(_val);
        if (is_empty()) {
            first = p;
            last = p;
            return;
        }
        first->next = p;
        first = p;
    }
    void add_last(char _val) {
        Node* p = new Node(_val);
        if (is_empty()) {
            first = p;
            last = p;
            return;
        }
        p->next = last;
        last = p;
    }
    void add_mid(char _val){
        Node* p = new Node(_val);
        Node* temp = last;
        int len = 0;
        while (temp != NULL) {
            len++;
            temp = temp->next;
        }
        len = len / 2;
        Node* p3 = last;
        for(int i = 0; i < len-1; i++) p3 = p3->next;
        Node* p4 = last;
        for(int i = 0; i < len; i++) p4 = p4->next;
        p3->next = p;
        p->next = p4;
    }
    void remove_mid(){
        Node* p2 = last;
        int len = 0;
         while (p2 != NULL) {
            len++;
            p2 = p2->next;
        }
        if(len % 2 == 1) len = len / 2;
        else len = len / 2 -1;
        Node* p3 = last;
        for(int i = 0; i < len-1; i++) p3 = p3->next;
        Node* p4 = last;
        for(int i = 0; i < len+1; i++) p4 = p4->next;
        p3->next = p4;
    }
    void print() {
        if (is_empty()) return;
        Node* p = last;
        while (p) {
            cout << p->val << endl;
            p = p->next;
        }
        cout << endl;
    }

    void remove_first() {
        Node* p = last;
        if (is_empty()) return;
        int k = 0;
        if (last->next == NULL) {
            remove_last();
            return;
        }
        while (p->next != NULL){
            p = p->next;
            k++;
        }
        Node* p2 = last;
        for(int i = 0; i<k-1;i++) p2=p2->next;
        p2->next = nullptr;
        first = p2;
        delete p;
        
    }
    
    void remove_last() {
        Node* p = last;
        last = p->next;
        delete p;
    }

};
void print_menu(){
    cout << "1. Add first" << endl;
    cout << "2. Add last" << endl;
    cout << "3. Add mid" << endl;
    cout << "4. Remove first" << endl;
    cout << "5. Remove last" << endl;
    cout << "6. Remove mid" << endl;
    cout << "7. Print ochered" << endl;
    cout << "8. End" << endl;
}
list l;
void menu(){
    int x;
    bool f = true;
    char a;
    while(f){ print_menu(); cin >> x; cout << endl;
    switch(x){
        case 1:
            cout << "Write an letter: ";
            cin >> a;
            cout << endl;
            l.add_first(a);
            break;
        case 2:
            cout << "Write an letter: ";
            cin >> a;
            cout << endl;
            l.add_last(a);
            break; 
        case 3:
            cout << "Write an letter: ";
            cin >> a;
            cout << endl;
            l.add_mid(a);
            break;
        case 4:
            l.remove_first();
            break;
        case 5:
            l.remove_last();
            break;
        case 6:
            l.remove_mid();
            break;
        case 7:
            l.print();
            cout << endl;
            break;
        case 8:
            f = false;
            break;
        default:
            cout << "No, man" << endl;
            break;
    }
    }
}
int main()
{
    menu();
    return 0;
}